
public class a extends AsyncTask
{

    public a(MessageActivity messageactivity)
    {
        b = 0;
        e = new ArrayList();
        a = messageactivity;
    }

    public static String a(String s, String s1, String s2)
    {
        try
        {
            StringBuilder stringbuilder = JVM INSTR new #35  <Class StringBuilder>;
            stringbuilder.StringBuilder();
            stringbuilder.append("pin+");
            stringbuilder.append(s1);
            Log.wtf("PTLAB", stringbuilder.toString());
            stringbuilder = JVM INSTR new #35  <Class StringBuilder>;
            stringbuilder.StringBuilder();
            stringbuilder.append("key");
            stringbuilder.append(s2);
            Log.wtf("PTLAB", stringbuilder.toString());
            stringbuilder = JVM INSTR new #35  <Class StringBuilder>;
            stringbuilder.StringBuilder();
            stringbuilder.append("in");
            stringbuilder.append(s);
            Log.wtf("PTLAB", stringbuilder.toString());
            byte abyte1[] = Base64.decode(s, 0);
            s = new byte[abyte1.length];
            byte abyte2[] = new byte[16];
            byte abyte0[] = new byte[16];
            System.arraycopy(abyte1, 0, abyte2, 0, abyte2.length);
            s = JVM INSTR new #72  <Class IvParameterSpec>;
            s.IvParameterSpec(abyte2);
            int i = abyte1.length - 16;
            abyte2 = new byte[i];
            System.arraycopy(abyte1, 16, abyte2, 0, i);
            MessageDigest messagedigest = MessageDigest.getInstance("MD5");
            messagedigest.update(s2.getBytes("UTF-8"));
            messagedigest.update(s1.getBytes("UTF-8"));
            System.arraycopy(messagedigest.digest(), 0, abyte0, 0, abyte0.length);
            s1 = JVM INSTR new #100 <Class SecretKeySpec>;
            s1.SecretKeySpec(abyte0, "AES");
            s2 = Cipher.getInstance("AES/CBC/PKCS5Padding");
            s2.init(2, s1, s);
            s = new String(s2.doFinal(abyte2));
        }
        // Misplaced declaration of an exception variable
        catch(String s)
        {
            Log.wtf("PTLAB", s.toString());
            return "";
        }
        return s;
    }

    protected transient ArrayList a(String as[][])
    {
        String s;
        String s2;
        s = "";
        s2 = s;
        Object obj = JVM INSTR new #129 <Class DefaultHttpClient>;
        s2 = s;
        ((DefaultHttpClient) (obj)).DefaultHttpClient();
        s2 = s;
        Object obj1 = JVM INSTR new #132 <Class HttpGet>;
        s2 = s;
        ((HttpGet) (obj1)).HttpGet("https://pentesterlab.com/android08/keys.json");
        s2 = s;
        obj1 = ((HttpClient) (obj)).execute(((org.apache.http.client.methods.HttpUriRequest) (obj1)));
        s2 = s;
        b = ((HttpResponse) (obj1)).getStatusLine().getStatusCode();
        s2 = s;
        obj = ((HttpResponse) (obj1)).getEntity();
        s2 = s;
        String s3 = EntityUtils.toString(((org.apache.http.HttpEntity) (obj)));
        s2 = s;
        Log.wtf("PTLAB", s3);
        s2 = s;
        obj1 = JVM INSTR new #166 <Class JSONObject>;
        s2 = s;
        ((JSONObject) (obj1)).JSONObject(s3);
        s2 = s;
        obj1 = ((JSONObject) (obj1)).getString("key");
        s = ((String) (obj1));
        break MISSING_BLOCK_LABEL_145;
        JSONException jsonexception;
        jsonexception;
        s2 = s;
        Log.wtf("PTLAB", jsonexception.toString());
        s = "";
        s2 = s;
        if(obj == null)
            break MISSING_BLOCK_LABEL_187;
        s2 = s;
        Log.i("RESPONSE", s3);
        s2 = s;
        break MISSING_BLOCK_LABEL_187;
        Exception exception;
        exception;
        d = exception.getMessage();
        c = exception.getClass().getSimpleName();
        Log.wtf("PTLAB", as[0][1]);
        String s1 = as[0][0];
        as = as[0][1];
        e.add(new String[] {
            s2, s1, as
        });
        return e;
    }

    protected void a(ArrayList arraylist)
    {
        super.onPostExecute(arraylist);
        String as[] = (String[])arraylist.get(0);
        Log.wtf("PTLAB", as.toString());
        arraylist = as[0];
        arraylist = a(as[1], as[2], ((String) (arraylist)));
        Log.wtf("PTLAB", arraylist);
        MessageActivity messageactivity = a;
        StringBuilder stringbuilder = new StringBuilder();
        stringbuilder.append("The key is: \n");
        stringbuilder.append(arraylist);
        messageactivity.a(stringbuilder.toString());
        if(b == 403)
            Toast.makeText(a, "Error : Seems like the pin you entered was invalid", 1).show();
    }

    protected Object doInBackground(Object aobj[])
    {
        return a((String[][])aobj);
    }

    protected void onPostExecute(Object obj)
    {
        a((ArrayList)obj);
    }

    MessageActivity a;
    int b;
    String c;
    String d;
    private ArrayList e;
}
